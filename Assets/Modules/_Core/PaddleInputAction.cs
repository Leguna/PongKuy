//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Modules/_Core/PaddleInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PaddleInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PaddleInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PaddleInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8794c679-8199-4fdc-ba59-c00c71c86eff"",
            ""actions"": [
                {
                    ""name"": ""PaddleLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5eace2ea-da86-49bc-9082-239104cafd03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PaddleRight"",
                    ""type"": ""Button"",
                    ""id"": ""85603898-4a8c-4e72-8e33-17e264327a4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ServiceLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e81238fd-e89f-40c8-9b53-a58893fed189"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ServiceRight"",
                    ""type"": ""Button"",
                    ""id"": ""c83f2e17-3c1d-4aaf-8dca-3b2102146c5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cf5b1f7d-81ea-41b2-8f3f-eeeecb223fcb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPhase"",
                    ""type"": ""Value"",
                    ""id"": ""8b262470-f1ee-41a6-8c40-81761839b4c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7f2701e5-603b-409c-8426-a8df2a7db63f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaddleLeft"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7e7c878e-5a6a-4a27-ada4-977755ff3864"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaddleLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1b45de96-0c99-45c7-978d-a6e54f625aae"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaddleLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Player"",
                    ""id"": ""615b6241-cb58-41bb-8e52-88c00643cab2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaddleRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""91a14c9b-98b3-4c73-9781-6bd2de005990"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaddleRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6bf60a75-6efd-4f3b-8e0a-68a70d21f878"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaddleRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""74415ee1-8f06-4930-8abe-74e648797466"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ServiceLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27eee13e-de61-4912-959d-23aa98d2d470"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ServiceLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b24a730e-5136-43fc-b03f-75b3b3f0065e"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ServiceRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0df64cc8-c0e6-4f0b-b804-b722ac8bf96f"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ServiceRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b985c82-61c7-4207-8b5f-5950a72f67c6"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e14bab2-f31e-4203-9fc8-ea7dd12a30ec"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c47a9bf8-9b28-477d-8bc9-e56f67d076d5"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPhase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PaddleLeft = m_Player.FindAction("PaddleLeft", throwIfNotFound: true);
        m_Player_PaddleRight = m_Player.FindAction("PaddleRight", throwIfNotFound: true);
        m_Player_ServiceLeft = m_Player.FindAction("ServiceLeft", throwIfNotFound: true);
        m_Player_ServiceRight = m_Player.FindAction("ServiceRight", throwIfNotFound: true);
        m_Player_Touch = m_Player.FindAction("Touch", throwIfNotFound: true);
        m_Player_TouchPhase = m_Player.FindAction("TouchPhase", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PaddleLeft;
    private readonly InputAction m_Player_PaddleRight;
    private readonly InputAction m_Player_ServiceLeft;
    private readonly InputAction m_Player_ServiceRight;
    private readonly InputAction m_Player_Touch;
    private readonly InputAction m_Player_TouchPhase;
    public struct PlayerActions
    {
        private @PaddleInputAction m_Wrapper;
        public PlayerActions(@PaddleInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PaddleLeft => m_Wrapper.m_Player_PaddleLeft;
        public InputAction @PaddleRight => m_Wrapper.m_Player_PaddleRight;
        public InputAction @ServiceLeft => m_Wrapper.m_Player_ServiceLeft;
        public InputAction @ServiceRight => m_Wrapper.m_Player_ServiceRight;
        public InputAction @Touch => m_Wrapper.m_Player_Touch;
        public InputAction @TouchPhase => m_Wrapper.m_Player_TouchPhase;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PaddleLeft.started += instance.OnPaddleLeft;
            @PaddleLeft.performed += instance.OnPaddleLeft;
            @PaddleLeft.canceled += instance.OnPaddleLeft;
            @PaddleRight.started += instance.OnPaddleRight;
            @PaddleRight.performed += instance.OnPaddleRight;
            @PaddleRight.canceled += instance.OnPaddleRight;
            @ServiceLeft.started += instance.OnServiceLeft;
            @ServiceLeft.performed += instance.OnServiceLeft;
            @ServiceLeft.canceled += instance.OnServiceLeft;
            @ServiceRight.started += instance.OnServiceRight;
            @ServiceRight.performed += instance.OnServiceRight;
            @ServiceRight.canceled += instance.OnServiceRight;
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @TouchPhase.started += instance.OnTouchPhase;
            @TouchPhase.performed += instance.OnTouchPhase;
            @TouchPhase.canceled += instance.OnTouchPhase;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PaddleLeft.started -= instance.OnPaddleLeft;
            @PaddleLeft.performed -= instance.OnPaddleLeft;
            @PaddleLeft.canceled -= instance.OnPaddleLeft;
            @PaddleRight.started -= instance.OnPaddleRight;
            @PaddleRight.performed -= instance.OnPaddleRight;
            @PaddleRight.canceled -= instance.OnPaddleRight;
            @ServiceLeft.started -= instance.OnServiceLeft;
            @ServiceLeft.performed -= instance.OnServiceLeft;
            @ServiceLeft.canceled -= instance.OnServiceLeft;
            @ServiceRight.started -= instance.OnServiceRight;
            @ServiceRight.performed -= instance.OnServiceRight;
            @ServiceRight.canceled -= instance.OnServiceRight;
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @TouchPhase.started -= instance.OnTouchPhase;
            @TouchPhase.performed -= instance.OnTouchPhase;
            @TouchPhase.canceled -= instance.OnTouchPhase;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnPaddleLeft(InputAction.CallbackContext context);
        void OnPaddleRight(InputAction.CallbackContext context);
        void OnServiceLeft(InputAction.CallbackContext context);
        void OnServiceRight(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPhase(InputAction.CallbackContext context);
    }
}
